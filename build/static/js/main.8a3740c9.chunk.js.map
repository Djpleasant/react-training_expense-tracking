{"version":3,"sources":["components/UI/Card.js","components/Expenses/ExpensesFilter.js","components/Expenses/ExpenseDate.js","components/Expenses/ExpenseItem.js","components/Expenses/ExpensesList.js","components/Chart/ChartBar.js","components/Chart/Chart.js","components/Expenses/ExpensesChart.js","components/Expenses/Expenses.js","components/NewExpense/ExpenseForm.js","components/NewExpense/NewExpense.js","App.js","index.js"],"names":["Card","props","classes","className","children","ExpensesFilter","value","selected","onChange","event","onYearFilterChange","target","ExpenseDate","month","date","toLocaleString","day","year","getFullYear","ExpenseItem","title","amount","ExpensesList","filteredExpenses","length","map","expense","id","ChartBar","barFillHeight","maxValue","Math","round","style","height","label","Chart","dataPointValues","dataPoints","dataPoint","max","ExpensesChart","chartDataPoints","expenses","getMonth","Expenses","useState","yearFilter","setYearFilter","filter","toString","ExpenseForm","enteredTitle","enteredAmount","enteredDate","userInput","setUserInput","onSubmit","preventDefault","expenseData","Date","onSaveExpenseData","onStopEditing","type","prevState","min","step","onClick","NewExpense","isEditing","setIsEditing","enteredExpenseData","random","onAddExpense","TEST_EXPENSES","App","setExpenses","prevExpenses","ReactDOM","createRoot","document","getElementById","render"],"mappings":"ubAgBeA,MARf,SAAcC,GAEb,IAAMC,EAAU,QAAUD,EAAME,UAGhC,OAAO,qBAAKA,UAAWD,EAAhB,SAA0BD,EAAMG,UACvC,ECgBcC,G,MAvBQ,SAACJ,GAQtB,OACE,qBAAKE,UAAU,kBAAf,SACE,sBAAKA,UAAU,2BAAf,UACE,mDACA,yBAAQG,MAAOL,EAAMM,SAAUC,SARJ,SAACC,GAClCR,EAAMS,mBAAmBD,EAAME,OAAOL,MACtC,EAMM,UACE,wBAAQA,MAAM,OAAd,kBACA,wBAAQA,MAAM,OAAd,kBACA,wBAAQA,MAAM,OAAd,kBACA,wBAAQA,MAAM,OAAd,yBAKT,G,YCFcM,MAnBf,SAAqBX,GAEpB,IAAMY,EAAQZ,EAAMa,KAAKC,eAAe,QAAS,CAACF,MAAO,SAGnDG,EAAMf,EAAMa,KAAKC,eAAe,QAAS,CAACC,IAAK,YAG/CC,EAAOhB,EAAMa,KAAKI,cAExB,OACC,sBAAKf,UAAU,eAAf,UACC,qBAAKA,UAAU,sBAAf,SAAsCU,IACtC,qBAAKV,UAAU,qBAAf,SAAqCc,IACrC,qBAAKd,UAAU,oBAAf,SAAoCa,MAGtC,E,MCAcG,MAff,SAAqBlB,GAEpB,OACC,6BACC,eAAC,EAAD,CAAME,UAAU,eAAhB,UACC,cAAC,EAAD,CAAaW,KAAMb,EAAMa,OACzB,sBAAKX,UAAU,4BAAf,UACC,6BAAKF,EAAMmB,QACX,sBAAKjB,UAAU,sBAAf,cAAuCF,EAAMoB,iBAKjD,ECYcC,MAxBf,SAAsBrB,GAErB,IAAMsB,EAAmBtB,EAAMsB,iBAM/B,OAA+B,IAA5BA,EAAiBC,OACZ,oBAAIrB,UAAU,0BAAd,gCAGP,oBAAIA,UAAU,gBAAd,SACEoB,EAAiBE,KAAI,SAAAC,GAAO,OAC5B,cAAC,EAAD,CAECN,MAAOM,EAAQN,MACfC,OAAQK,EAAQL,OAChBP,KAAMY,EAAQZ,MAHTY,EAAQC,GAFc,KAS/B,E,OCJcC,G,YAnBE,SAAA3B,GAEhB,IAAI4B,EAAgB,KAOpB,OAJG5B,EAAM6B,SAAW,IACnBD,EAAgBE,KAAKC,MAAO/B,EAAMK,MAAQL,EAAM6B,SAAY,KAAO,KAInE,sBAAK3B,UAAU,YAAf,UACC,qBAAKA,UAAU,mBAAf,SACC,qBAAKA,UAAU,kBAAkB8B,MAAO,CAACC,OAAQL,OAElD,qBAAK1B,UAAU,mBAAf,SAAmCF,EAAMkC,UAG3C,GCQcC,MAxBf,SAAenC,GAMd,IAAMoC,EAAkBpC,EAAMqC,WAAWb,KAAI,SAAAc,GAAS,OAAIA,EAAUjC,KAAd,IAGhDwB,EAAWC,KAAKS,IAAL,MAAAT,KAAI,YAAQM,IAE7B,OACC,qBAAKlC,UAAU,QAAf,SACEF,EAAMqC,WAAWb,KAAI,SAAAc,GAAS,OAC/B,cAAC,EAAD,CAECjC,MAAOiC,EAAUjC,MACjBwB,SAAUA,EACVK,MAAOI,EAAUJ,OAHZI,EAAUJ,MAFe,KASjC,ECDcM,EA7BO,SAAAxC,GAErB,IAF8B,EAExByC,EAAkB,CACvB,CAAEP,MAAO,MAAO7B,MAAO,GACvB,CAAE6B,MAAO,MAAO7B,MAAO,GACvB,CAAE6B,MAAO,MAAO7B,MAAO,GACvB,CAAE6B,MAAO,MAAO7B,MAAO,GACvB,CAAE6B,MAAO,MAAO7B,MAAO,GACvB,CAAE6B,MAAO,MAAO7B,MAAO,GACvB,CAAE6B,MAAO,MAAO7B,MAAO,GACvB,CAAE6B,MAAO,MAAO7B,MAAO,GACvB,CAAE6B,MAAO,MAAO7B,MAAO,GACvB,CAAE6B,MAAO,MAAO7B,MAAO,GACvB,CAAE6B,MAAO,MAAO7B,MAAO,GACvB,CAAE6B,MAAO,MAAO7B,MAAO,IAdM,cAqBRL,EAAM0C,UArBE,IAqB9B,2BAAsC,CAAC,IAA5BjB,EAA2B,QAErCgB,EADqBhB,EAAQZ,KAAK8B,YACJtC,OAASoB,EAAQL,MAC/C,CAxB6B,+BA0B9B,OAAO,cAAC,EAAD,CAAOiB,WAAYI,GAC1B,ECWcG,MA1Bf,SAAkB5C,GAEjB,MAAoC6C,mBAAS,QAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAMMzB,EAHWtB,EAAM0C,SAGWM,QAAO,SAAAvB,GACxC,OAAOA,EAAQZ,KAAKI,cAAcgC,aAAeH,CACjD,IAOD,OACC,eAAC,EAAD,CAAM5C,UAAU,WAAhB,UACC,cAAC,EAAD,CAAgBI,SAAUwC,EAAYrC,mBANN,SAACO,GAClC+B,EAAc/B,EACd,IAKC,cAAC,EAAD,CAAe0B,SAAUpB,IACzB,cAAC,EAAD,CAAcA,iBAAkBA,MAGlC,E,mBC2Cc4B,MA9Ef,SAAqBlD,GAEpB,MAAkC6C,mBAAS,CAC1CM,aAAc,GACdC,cAAe,GACfC,YAAa,KAHd,mBAAOC,EAAP,KAAkBC,EAAlB,KAoDA,OACC,uBAAMC,SArBe,SAAChD,GACtBA,EAAMiD,iBAEN,IAAMC,EAAc,CACnBvC,MAAOmC,EAAUH,aACjB/B,QAASkC,EAAUF,cACnBvC,KAAM,IAAI8C,KAAKL,EAAUD,cAG1BrD,EAAM4D,kBAAkBF,GAExBH,EAAa,CACZJ,aAAc,GACdC,cAAe,GACfC,YAAa,KAGdrD,EAAM6D,eACN,EAGA,UACC,sBAAK3D,UAAU,wBAAf,UACC,sBAAKA,UAAU,uBAAf,UACC,0CACA,uBAAO4D,KAAK,OAAOzD,MAAOiD,EAAUH,aAAc5C,SAjD3B,SAACC,GAC3B+C,GAAa,SAACQ,GACb,OAAO,2BAAKA,GAAZ,IAAuBZ,aAAc3C,EAAME,OAAOL,OAClD,GACD,OA+CE,sBAAKH,UAAU,uBAAf,UACC,2CACA,uBAAO4D,KAAK,SAASE,IAAI,OAAOC,KAAK,OAAO5D,MAAOiD,EAAUF,cAAe7C,SA9CpD,SAACC,GAC5B+C,GAAa,SAACQ,GACb,OAAO,2BAAKA,GAAZ,IAAuBX,cAAe5C,EAAME,OAAOL,OACnD,GACD,OA4CE,sBAAKH,UAAU,uBAAf,UACC,yCACA,uBAAO4D,KAAK,OAAOE,IAAI,aAAazB,IAAI,aAAalC,MAAOiD,EAAUD,YAAa9C,SA3C7D,SAACC,GAC1B+C,GAAa,SAACQ,GACb,OAAO,2BAAKA,GAAZ,IAAuBV,YAAa7C,EAAME,OAAOL,OACjD,GACD,UA0CC,sBAAKH,UAAU,uBAAf,UACC,wBAAQ4D,KAAK,SAAb,yBACA,wBAAQA,KAAK,SAASI,QAASlE,EAAM6D,cAArC,yBAIH,EChCcM,MAlCf,SAAoBnE,GAEnB,MAAkC6C,oBAAS,GAA3C,mBAAOuB,EAAP,KAAkBC,EAAlB,KAwBA,OACC,sBAAKnE,UAAU,cAAf,WACGkE,GAAa,wBAAQF,QAVG,WAC3BG,GAAa,EACb,EAQgB,6BACdD,GAAa,cAAC,EAAD,CAAaP,cAPF,WAC1BQ,GAAa,EACb,EAK+DT,kBArB/B,SAACU,GACjC,IAAMZ,EAAW,2BACbY,GADa,IAEhB5C,GAAII,KAAKyC,SAAStB,aAGnBjD,EAAMwE,aAAad,EACnB,MAiBD,ECvCKe,EAAgB,CACpB,CAAE/C,GAAI,KAAMP,MAAO,eAAgBC,OAAQ,MAAOP,KAAM,IAAI8C,KAAK,KAAM,EAAG,KAC1E,CAAEjC,GAAI,KAAMP,MAAO,SAAUC,OAAQ,OAAQP,KAAM,IAAI8C,KAAK,KAAM,EAAG,KACrE,CAAEjC,GAAI,KAAKP,MAAO,gBAAiBC,OAAQ,OAAQP,KAAM,IAAI8C,KAAK,KAAM,EAAG,KAC3E,CAAEjC,GAAI,KAAMP,MAAO,oBAAqBC,OAAQ,IAAKP,KAAM,IAAI8C,KAAK,KAAM,EAAG,MA8BhEe,MAtBf,WAEE,MAAgC7B,mBAAS4B,GAAzC,mBAAO/B,EAAP,KAAiBiC,EAAjB,KAYA,OACE,gCACE,cAAC,EAAD,CAAYH,aARU,SAAA/C,GACxBkD,GAAY,SAAAC,GACV,MAAM,CAAEnD,GAAR,mBAAoBmD,GACrB,GACF,IAKG,cAAC,EAAD,CAAUlC,SAAUA,MAGzB,ECjCYmC,IAASC,WAAWC,SAASC,eAAe,SACpDC,OAAO,cAAC,EAAD,I","file":"static/js/main.8a3740c9.chunk.js","sourcesContent":["import './Card.css';\n\n/**\n * Basic card component that adds rounded edges and a light box shadow\n * \n * @param {*} props \n * @returns \n */\nfunction Card(props){\n\t/** Sets the card class by default and then any additional classes added by the parent component*/\n\tconst classes = 'card ' + props.className;\n\n\t/** Wraps the child elements in the 'card' div to apply */\n\treturn <div className={classes}>{props.children}</div>\n}\n\nexport default Card;","import './ExpensesFilter.css';\n\n/**\n * Component handles the user interaction for selecting a year filter.\n *  \n * @returns \n */\nconst ExpensesFilter = (props) => {\n  /** Event handler fired when the year filter is changed and lifts that \n   * change up to the parent component\n   */\n\tconst onYearFilterChangeHandler = (event) => {\n\t\tprops.onYearFilterChange(event.target.value);\n\t};\n\n  return (\n    <div className='expenses-filter'>\n      <div className='expenses-filter__control'>\n        <label>Filter by year</label>\n        <select value={props.selected} onChange={onYearFilterChangeHandler}>\n          <option value='2022'>2022</option>\n          <option value='2021'>2021</option>\n          <option value='2020'>2020</option>\n          <option value='2019'>2019</option>\n        </select>\n      </div>\n    </div>\n  );\n};\n\nexport default ExpensesFilter;","import './ExpenseDate.css';\n\n/**\n * Component stores and visualizes the date for the ExpenseItem\n *  \n * @returns \n */\nfunction ExpenseDate(props){\n\t/** Property to store a string representation of the month */\n\tconst month = props.date.toLocaleString('en-US', {month: 'long'});\n\n\t/** Property to store a string representation of the day */\n\tconst day = props.date.toLocaleString('en-US', {day: '2-digit'});\n\n\t/** Property to store a string representation of the yaer */\n\tconst year = props.date.getFullYear();\n\n\treturn (\n\t\t<div className=\"expense-date\">\n\t\t\t<div className=\"expense-date__month\">{month}</div>\n\t\t\t<div className=\"expense-date__year\">{year}</div>\n\t\t\t<div className=\"expense-date__day\">{day}</div>\n\t\t</div>\n\t);\n}\n\nexport default ExpenseDate;","import ExpenseDate from './ExpenseDate';\nimport Card from '../UI/Card';\nimport './ExpenseItem.css';\n\n/**\n * Component formats the expense data for a specific ExpenseItem\n * \n * @returns \n */\nfunction ExpenseItem(props) {\n\n\treturn(\n\t\t<li>\n\t\t\t<Card className=\"expense-item\">\n\t\t\t\t<ExpenseDate date={props.date}/>\n\t\t\t\t<div className=\"expense-item__description\">\n\t\t\t\t\t<h2>{props.title}</h2>\n\t\t\t\t\t<div className=\"expense-item__price\">${props.amount}</div>\n\t\t\t\t</div>\n\t\t\t</Card>\n\t\t</li>\n\t);\n}\n\nexport default ExpenseItem;","import './ExpensesList.css';\n\nimport ExpenseItem from './ExpenseItem';\n\n/**\n * Creates a list of expenses that are passed from the \n * parent component. This does not do any filtering.\n * \n * @returns \n */\nfunction ExpensesList(props) {\n\t/** Data handed down from parent component holding the filtered expenses */\n\tconst filteredExpenses = props.filteredExpenses;\n\n\t/**\n\t * These conditional statements will show text if no expenses were found in the list \n\t * or a list of expenses if expenses were found.\n\t */\n\tif(filteredExpenses.length === 0){\n\t\treturn <h2 className='expenses-list__fallback'>Found no expenses.</h2>\n\t}\n\treturn(\n\t\t<ul className='expenses-list'>\n\t\t\t{filteredExpenses.map(expense => \n\t\t\t\t<ExpenseItem\n\t\t\t\t\tkey={expense.id}\n\t\t\t\t\ttitle={expense.title}\n\t\t\t\t\tamount={expense.amount}\n\t\t\t\t\tdate={expense.date} />)}\n\t\t</ul>\n\t\t\n\t);\n}\n\nexport default ExpensesList;","import './ChartBar.css';\n\n/**\n * Component visualizes an individual time frame (ex: 'Jan') and \n * fills in the bar based on the value and maxValue props that are\n * provided from the parent component.\n * \n * @returns \n */\nconst ChartBar = props => {\n\t/** Fill height used in JSX component style to be set dynamically */\n\tlet barFillHeight = '0%';\n\n\t/** Calculates the fill height of the bar */\n\tif(props.maxValue > 0){\n\t\tbarFillHeight = Math.round((props.value / props.maxValue) * 100) + '%';\n\t}\n\n\treturn (\n\t\t<div className='chart-bar'>\n\t\t\t<div className='chart-bar__inner'>\n\t\t\t\t<div className='chart-bar__fill' style={{height: barFillHeight}}></div>\n\t\t\t</div>\n\t\t\t<div className='chart-bar__label'>{props.label}</div>\n\t\t</div>\n\t);\n}\n\nexport default ChartBar;","import './Chart.css';\n\nimport ChartBar from './ChartBar';\n\n/**\n * Creates a visualization in bar graph form of the expenses per month in \n * a given year.\n *  \n * @returns \n */\nfunction Chart(props){\n\t/** \n\t * Data points to visualize passed down from parent component.\n\t * It spreads the dataPoint.value into an array so we can calculate\n\t * the maxValue a little easier.\n\t */\n\tconst dataPointValues = props.dataPoints.map(dataPoint => dataPoint.value);\n\n\t/** The max value calculated from the provided data points */\n\tconst maxValue = Math.max(...dataPointValues);\n\n\treturn(\n\t\t<div className='chart'>\n\t\t\t{props.dataPoints.map(dataPoint =>\n\t\t\t<ChartBar\n\t\t\t\tkey={dataPoint.label}\n\t\t\t\tvalue={dataPoint.value}\n\t\t\t\tmaxValue={maxValue}\n\t\t\t\tlabel={dataPoint.label}/>)\n\t\t\t}\n\t\t</div>\n\t);\n}\n\nexport default Chart;","import Chart from \"../Chart/Chart\";\n\nconst ExpensesChart = props => {\n\t/** Base data that is manipulated on component creation */\n\tconst chartDataPoints = [\n\t\t{ label: 'Jan', value: 0},\n\t\t{ label: 'Feb', value: 0},\n\t\t{ label: 'Mar', value: 0},\n\t\t{ label: 'Apr', value: 0},\n\t\t{ label: 'May', value: 0},\n\t\t{ label: 'Jun', value: 0},\n\t\t{ label: 'Jul', value: 0},\n\t\t{ label: 'Aug', value: 0},\n\t\t{ label: 'Sep', value: 0},\n\t\t{ label: 'Oct', value: 0},\n\t\t{ label: 'Nov', value: 0},\n\t\t{ label: 'Dec', value: 0}\n\t];\n\n\t/** \n\t * Expense data passed down from parent component is then added to the \n\t * 'chartDataPoints' value properties\n\t */\n\tfor (const expense of props.expenses) {\n\t\tconst expenseMonth = expense.date.getMonth();\n\t\tchartDataPoints[expenseMonth].value += expense.amount;\n\t}\n\n\treturn <Chart dataPoints={chartDataPoints}/>;\n}\n\nexport default ExpensesChart;","import { useState } from 'react';\nimport './Expenses.css';\n\nimport Card from '../UI/Card';\nimport ExpensesFilter from './ExpensesFilter';\nimport ExpensesList from './ExpensesList';\nimport ExpensesChart from './ExpensesChart';\n\n/**\n * Component visualizes the expenses and allows the user to filter \n * expenses by year.\n * \n * @returns \n */\nfunction Expenses(props){\n\t/** State property for the year we are filtering expenses for */\n\tconst [yearFilter, setYearFilter] = useState('2022');\n\n\t/** Data passed down from parent component for all current expenses */\n\tconst expenses = props.expenses;\n\n\t/** Holds the expense data only for those expenses in the filtered year */\n\tconst filteredExpenses = expenses.filter(expense => {\n\t\treturn expense.date.getFullYear().toString() === yearFilter;\n\t});\n\t\n\t/** Updates the state of the year filter */\n\tconst onYearFilterChangeHandler = (year) => {\n\t\tsetYearFilter(year);\n\t};\n\n\treturn(\n\t\t<Card className=\"expenses\">\n\t\t\t<ExpensesFilter selected={yearFilter} onYearFilterChange={onYearFilterChangeHandler} />\n\t\t\t<ExpensesChart expenses={filteredExpenses}/>\n\t\t\t<ExpensesList filteredExpenses={filteredExpenses}/>\n\t\t</Card>\n\t);\n}\n\nexport default Expenses;","import { useState } from 'react';\nimport './ExpenseForm.css';\n\nfunction ExpenseForm(props){\n\t/** Holds current state data for the new expense input fields */\n\tconst [userInput, setUserInput] = useState({\n\t\tenteredTitle: '',\n\t\tenteredAmount: '',\n\t\tenteredDate: ''\n\t});\n\n\n\t/** Called when the title input field is changed */\n\tconst titleChangeHandler = (event) => {\n\t\tsetUserInput((prevState) => {\n\t\t\treturn { ...prevState, enteredTitle: event.target.value };\n\t\t});\n\t};\n\n\t/** Called when the amount input field is changed */\n\tconst amountChangeHandler = (event) => {\n\t\tsetUserInput((prevState) => {\n\t\t\treturn { ...prevState, enteredAmount: event.target.value };\n\t\t});\n\t};\n\n\t/** Called when the date input field is changed */\n\tconst dateChangeHandler = (event) => {\n\t\tsetUserInput((prevState) => {\n\t\t\treturn { ...prevState, enteredDate: event.target.value };\n\t\t});\n\t};\n\n\t/** Called when the form is submitted. It does not\n\t * validate the data, simply lifts the data up to the\n\t * parent component and clears the form data.\n\t */\n\tconst submitHandler = (event) => {\n\t\tevent.preventDefault();\n\n\t\tconst expenseData = {\n\t\t\ttitle: userInput.enteredTitle,\n\t\t\tamount: +userInput.enteredAmount,\n\t\t\tdate: new Date(userInput.enteredDate)\n\t\t};\n\n\t\tprops.onSaveExpenseData(expenseData);\n\n\t\tsetUserInput({\n\t\t\tenteredTitle: '',\n\t\t\tenteredAmount: '',\n\t\t\tenteredDate: ''\n\t\t});\n\n\t\tprops.onStopEditing();\n\t};\n\n\treturn(\n\t\t<form onSubmit={submitHandler}>\n\t\t\t<div className='new-expense__controls'>\n\t\t\t\t<div className='new-expense__control'>\n\t\t\t\t\t<label>Title</label>\n\t\t\t\t\t<input type='text' value={userInput.enteredTitle} onChange={titleChangeHandler}/>\n\t\t\t\t</div>\n\t\t\t\t<div className='new-expense__control'>\n\t\t\t\t\t<label>Amount</label>\n\t\t\t\t\t<input type='number' min=\"0.01\" step='0.01' value={userInput.enteredAmount} onChange={amountChangeHandler}/>\n\t\t\t\t</div>\n\t\t\t\t<div className='new-expense__control'>\n\t\t\t\t\t<label>Date</label>\n\t\t\t\t\t<input type='date' min=\"2019-01-01\" max='2022-12-31' value={userInput.enteredDate} onChange={dateChangeHandler}/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className='new-expense__actions'>\n\t\t\t\t<button type='submit'>Add Expense</button>\n\t\t\t\t<button type='button' onClick={props.onStopEditing}>Cancel</button>\n\t\t\t</div>\n\t\t</form>\n\t);\n};\n\nexport default ExpenseForm;","import { useState } from 'react';\n\nimport './NewExpense.css';\n\nimport ExpenseForm from './ExpenseForm';\n\n/**\n * Component that handles the new expense form. Has an editing \n * state that either shows a button to add a new expense or shows \n * the new expense form itself.\n * \n * @returns \n */\nfunction NewExpense(props){\n\t/** State property whether we are adding a new expense or not */\n\tconst [isEditing, setIsEditing] = useState(false);\n\n\t/** Function handed down to child ExpenseForm Component\n\t * to received a new expense. Adds a random id and then lifts \n\t * that data up to the parent component.\n\t */\n\tconst onSaveExpenseDataHandler = (enteredExpenseData) => {\n\t\tconst expenseData = {\n\t\t\t...enteredExpenseData,\n\t\t\tid: Math.random().toString()\n\t\t};\n\n\t\tprops.onAddExpense(expenseData);\n\t};\n\n\t/** Sets the editing state to true */\n\tconst startEditingHandler = () =>{\n\t\tsetIsEditing(true);\n\t}\n\t/** Sets the editing state to false */\n\tconst stopEditingHandler = () =>{\n\t\tsetIsEditing(false);\n\t}\n\n\treturn (\n\t\t<div className=\"new-expense\">\n\t\t\t{!isEditing && <button onClick={startEditingHandler}>Add New Expense</button>}\n\t\t\t{isEditing && <ExpenseForm onStopEditing={stopEditingHandler} onSaveExpenseData={onSaveExpenseDataHandler}/>}\n\t\t</div>\n\t);\n};\n\nexport default NewExpense;","import { useState } from 'react';\n\nimport Expenses from './components/Expenses/Expenses';\nimport NewExpense from './components/NewExpense/NewExpense';\n\n/** Test data for local hosting */\nconst TEST_EXPENSES = [\n  { id: 'e1', title: 'Toilet Paper', amount: 94.12, date: new Date(2020, 7, 14) },\n  { id: 'e2', title: 'New TV', amount: 799.49, date: new Date(2021, 2, 12) },\n  { id: 'e3',title: 'Car Insurance', amount: 294.67, date: new Date(2021, 2, 28) },\n  { id: 'e4', title: 'New Desk (Wooden)', amount: 450, date: new Date(2021, 5, 12) },\n];\n\n/**\n * Root app component.\n * \n * @returns \n */\nfunction App() {\n  /** State property to access and update stored expenses */\n  const [expenses, setExpenses] = useState(TEST_EXPENSES);\n\n  /**\n   * Adds an expense to the state property\n   * @param {{id, title, amount, date}} expense \n   */\n  const addExpenseHandler = expense => {\n    setExpenses(prevExpenses => {\n      return [expense, ...prevExpenses];\n    });\n  };\n\n  return (\n    <div>\n      <NewExpense onAddExpense={addExpenseHandler}/>\n      <Expenses expenses={expenses} />\n    </div>\n  );\n}\n\nexport default App;","import ReactDOM from 'react-dom/client';\n\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<App />);"],"sourceRoot":""}